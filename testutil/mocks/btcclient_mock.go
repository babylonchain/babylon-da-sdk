// Code generated by MockGen. DO NOT EDIT.
// Source: sdk/btcclient/interface.go
//
// Generated by this command:
//
//	mockgen -source=sdk/btcclient/interface.go -package mocks -destination /Users/zidong/Documents/Projects/babylon-finality-gadget/testutil/mocks/btcclient_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	chainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
	wire "github.com/btcsuite/btcd/wire"
	gomock "go.uber.org/mock/gomock"
)

// MockBTCClientInterface is a mock of BTCClientInterface interface.
type MockBTCClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBTCClientInterfaceMockRecorder
}

// MockBTCClientInterfaceMockRecorder is the mock recorder for MockBTCClientInterface.
type MockBTCClientInterfaceMockRecorder struct {
	mock *MockBTCClientInterface
}

// NewMockBTCClientInterface creates a new mock instance.
func NewMockBTCClientInterface(ctrl *gomock.Controller) *MockBTCClientInterface {
	mock := &MockBTCClientInterface{ctrl: ctrl}
	mock.recorder = &MockBTCClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBTCClientInterface) EXPECT() *MockBTCClientInterfaceMockRecorder {
	return m.recorder
}

// GetBlockCount mocks base method.
func (m *MockBTCClientInterface) GetBlockCount() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockCount")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockCount indicates an expected call of GetBlockCount.
func (mr *MockBTCClientInterfaceMockRecorder) GetBlockCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockCount", reflect.TypeOf((*MockBTCClientInterface)(nil).GetBlockCount))
}

// GetBlockHashByHeight mocks base method.
func (m *MockBTCClientInterface) GetBlockHashByHeight(height uint64) (*chainhash.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHashByHeight", height)
	ret0, _ := ret[0].(*chainhash.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHashByHeight indicates an expected call of GetBlockHashByHeight.
func (mr *MockBTCClientInterfaceMockRecorder) GetBlockHashByHeight(height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHashByHeight", reflect.TypeOf((*MockBTCClientInterface)(nil).GetBlockHashByHeight), height)
}

// GetBlockHeaderByHash mocks base method.
func (m *MockBTCClientInterface) GetBlockHeaderByHash(blockHash *chainhash.Hash) (*wire.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeaderByHash", blockHash)
	ret0, _ := ret[0].(*wire.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeaderByHash indicates an expected call of GetBlockHeaderByHash.
func (mr *MockBTCClientInterfaceMockRecorder) GetBlockHeaderByHash(blockHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeaderByHash", reflect.TypeOf((*MockBTCClientInterface)(nil).GetBlockHeaderByHash), blockHash)
}

// GetBlockHeightByTimestamp mocks base method.
func (m *MockBTCClientInterface) GetBlockHeightByTimestamp(targetTimestamp uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeightByTimestamp", targetTimestamp)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeightByTimestamp indicates an expected call of GetBlockHeightByTimestamp.
func (mr *MockBTCClientInterfaceMockRecorder) GetBlockHeightByTimestamp(targetTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeightByTimestamp", reflect.TypeOf((*MockBTCClientInterface)(nil).GetBlockHeightByTimestamp), targetTimestamp)
}
