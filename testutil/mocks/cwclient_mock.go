// Code generated by MockGen. DO NOT EDIT.
// Source: sdk/cwclient/interface.go
//
// Generated by this command:
//
//	mockgen -source=sdk/cwclient/interface.go -package mocks -destination /Users/zidong/Documents/Projects/babylon-finality-gadget/testutil/mocks/cwclient_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	cwclient "github.com/babylonchain/babylon-finality-gadget/sdk/cwclient"
	gomock "go.uber.org/mock/gomock"
)

// MockCosmWasmClientInterface is a mock of CosmWasmClientInterface interface.
type MockCosmWasmClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCosmWasmClientInterfaceMockRecorder
}

// MockCosmWasmClientInterfaceMockRecorder is the mock recorder for MockCosmWasmClientInterface.
type MockCosmWasmClientInterfaceMockRecorder struct {
	mock *MockCosmWasmClientInterface
}

// NewMockCosmWasmClientInterface creates a new mock instance.
func NewMockCosmWasmClientInterface(ctrl *gomock.Controller) *MockCosmWasmClientInterface {
	mock := &MockCosmWasmClientInterface{ctrl: ctrl}
	mock.recorder = &MockCosmWasmClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCosmWasmClientInterface) EXPECT() *MockCosmWasmClientInterfaceMockRecorder {
	return m.recorder
}

// QueryConsumerId mocks base method.
func (m *MockCosmWasmClientInterface) QueryConsumerId() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryConsumerId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryConsumerId indicates an expected call of QueryConsumerId.
func (mr *MockCosmWasmClientInterfaceMockRecorder) QueryConsumerId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryConsumerId", reflect.TypeOf((*MockCosmWasmClientInterface)(nil).QueryConsumerId))
}

// QueryIsEnabled mocks base method.
func (m *MockCosmWasmClientInterface) QueryIsEnabled() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryIsEnabled")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIsEnabled indicates an expected call of QueryIsEnabled.
func (mr *MockCosmWasmClientInterfaceMockRecorder) QueryIsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIsEnabled", reflect.TypeOf((*MockCosmWasmClientInterface)(nil).QueryIsEnabled))
}

// QueryListOfVotedFinalityProviders mocks base method.
func (m *MockCosmWasmClientInterface) QueryListOfVotedFinalityProviders(queryParams *cwclient.L2Block) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryListOfVotedFinalityProviders", queryParams)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryListOfVotedFinalityProviders indicates an expected call of QueryListOfVotedFinalityProviders.
func (mr *MockCosmWasmClientInterfaceMockRecorder) QueryListOfVotedFinalityProviders(queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryListOfVotedFinalityProviders", reflect.TypeOf((*MockCosmWasmClientInterface)(nil).QueryListOfVotedFinalityProviders), queryParams)
}
