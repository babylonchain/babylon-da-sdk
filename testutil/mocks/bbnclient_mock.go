// Code generated by MockGen. DO NOT EDIT.
// Source: sdk/bbnclient/interface.go
//
// Generated by this command:
//
//	mockgen -source=sdk/bbnclient/interface.go -package mocks -destination /Users/zidong/Documents/Projects/babylon-finality-gadget/testutil/mocks/bbnclient_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBBNClientInterface is a mock of BBNClientInterface interface.
type MockBBNClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBBNClientInterfaceMockRecorder
}

// MockBBNClientInterfaceMockRecorder is the mock recorder for MockBBNClientInterface.
type MockBBNClientInterfaceMockRecorder struct {
	mock *MockBBNClientInterface
}

// NewMockBBNClientInterface creates a new mock instance.
func NewMockBBNClientInterface(ctrl *gomock.Controller) *MockBBNClientInterface {
	mock := &MockBBNClientInterface{ctrl: ctrl}
	mock.recorder = &MockBBNClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBBNClientInterface) EXPECT() *MockBBNClientInterfaceMockRecorder {
	return m.recorder
}

// QueryAllFpBtcPubKeys mocks base method.
func (m *MockBBNClientInterface) QueryAllFpBtcPubKeys(consumerId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllFpBtcPubKeys", consumerId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllFpBtcPubKeys indicates an expected call of QueryAllFpBtcPubKeys.
func (mr *MockBBNClientInterfaceMockRecorder) QueryAllFpBtcPubKeys(consumerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllFpBtcPubKeys", reflect.TypeOf((*MockBBNClientInterface)(nil).QueryAllFpBtcPubKeys), consumerId)
}

// QueryFpPower mocks base method.
func (m *MockBBNClientInterface) QueryFpPower(fpPubkeyHex string, btcHeight uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFpPower", fpPubkeyHex, btcHeight)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFpPower indicates an expected call of QueryFpPower.
func (mr *MockBBNClientInterfaceMockRecorder) QueryFpPower(fpPubkeyHex, btcHeight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFpPower", reflect.TypeOf((*MockBBNClientInterface)(nil).QueryFpPower), fpPubkeyHex, btcHeight)
}

// QueryMultiFpPower mocks base method.
func (m *MockBBNClientInterface) QueryMultiFpPower(fpPubkeyHexList []string, btcHeight uint64) (map[string]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMultiFpPower", fpPubkeyHexList, btcHeight)
	ret0, _ := ret[0].(map[string]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMultiFpPower indicates an expected call of QueryMultiFpPower.
func (mr *MockBBNClientInterfaceMockRecorder) QueryMultiFpPower(fpPubkeyHexList, btcHeight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMultiFpPower", reflect.TypeOf((*MockBBNClientInterface)(nil).QueryMultiFpPower), fpPubkeyHexList, btcHeight)
}
